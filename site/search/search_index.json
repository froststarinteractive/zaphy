{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zaphy Framework Zaphy is a game framework for Roblox making it easy and fast to create games. Zaphy is very simplistic and is intended to only give 3 features out-of-the-box: A simple module loader Extremely easy server-client communication functions Pre-bundled utility modules Installation To install Zaphy, download the Wally package via: Zaphy = \"ivadsiuls/zaphy@2.1.4\" Run wally install to install Zaphy into your project wally install Setting up your project Your VSCode file tree should look something like this: Packages: (these are your wally packages, this includes where Zaphy is stored.) src: modules: client: Controllers: server: Services: shared: scripts: client: Start.client.luau server: Start.server.luau Your project.json file should look something like this: { \"name\": \"YOUR PROJECT\", \"tree\": { \"$className\": \"DataModel\", \"ReplicatedStorage\": { \"Shared\": { \"$path\": \"src/modules/shared\" }, \"Packages\": { \"$path\": \"Packages\" } }, \"ServerScriptService\": { \"Server\": { \"$path\": \"src/modules/server\" }, \"ServerScripts\": { \"$path\": \"src/scripts/server\" } }, \"StarterPlayer\": { \"StarterPlayerScripts\": { \"Client\": { \"$path\": \"src/modules/client\" }, \"ClientScripts\": { \"$path\": \"src/scripts/client\" } } } } } Starting Zaphy To start Zaphy , create a script in your Server Scripts directory, and require Zaphy: local ReplicatedStorage = game:GetService(\"ReplicatedStorage\") local Packages = ReplicatedStorage:FindFirstChild(\"Packages\") local Zaphy = require(Packages[\"Zaphy\"]) Client To add your Controllers to Zaphy, use Zaphy:AddControllers: local Controllers = script.Parent.Parent:FindFirstChild(\"Client\").Controllers:GetDescendants() Zaphy:AddControllers(Controllers) Server To add your Services to Zaphy, use Zaphy:AddServices: local Services = script.Parent.Parent:FindFirstChild(\"Server\").Services:GetDescendants() Zaphy:AddServices(Services) Lastly, to start Zaphy use: Zaphy:StartZaphy()","title":"Home"},{"location":"#installation","text":"To install Zaphy, download the Wally package via: Zaphy = \"ivadsiuls/zaphy@2.1.4\" Run wally install to install Zaphy into your project wally install","title":"Installation"},{"location":"#setting-up-your-project","text":"Your VSCode file tree should look something like this: Packages: (these are your wally packages, this includes where Zaphy is stored.) src: modules: client: Controllers: server: Services: shared: scripts: client: Start.client.luau server: Start.server.luau Your project.json file should look something like this: { \"name\": \"YOUR PROJECT\", \"tree\": { \"$className\": \"DataModel\", \"ReplicatedStorage\": { \"Shared\": { \"$path\": \"src/modules/shared\" }, \"Packages\": { \"$path\": \"Packages\" } }, \"ServerScriptService\": { \"Server\": { \"$path\": \"src/modules/server\" }, \"ServerScripts\": { \"$path\": \"src/scripts/server\" } }, \"StarterPlayer\": { \"StarterPlayerScripts\": { \"Client\": { \"$path\": \"src/modules/client\" }, \"ClientScripts\": { \"$path\": \"src/scripts/client\" } } } } }","title":"Setting up your project"},{"location":"#starting-zaphy","text":"To start Zaphy , create a script in your Server Scripts directory, and require Zaphy: local ReplicatedStorage = game:GetService(\"ReplicatedStorage\") local Packages = ReplicatedStorage:FindFirstChild(\"Packages\") local Zaphy = require(Packages[\"Zaphy\"])","title":"Starting Zaphy"},{"location":"#client","text":"To add your Controllers to Zaphy, use Zaphy:AddControllers: local Controllers = script.Parent.Parent:FindFirstChild(\"Client\").Controllers:GetDescendants() Zaphy:AddControllers(Controllers)","title":"Client"},{"location":"#server","text":"To add your Services to Zaphy, use Zaphy:AddServices: local Services = script.Parent.Parent:FindFirstChild(\"Server\").Services:GetDescendants() Zaphy:AddServices(Services) Lastly, to start Zaphy use: Zaphy:StartZaphy()","title":"Server"},{"location":"api/","text":"\u2500\u2500\u2500\u2500\u2500 Zaphy Server \u2500\u2500\u2500\u2500\u2500 Types Service type Service = { Name: string, [any]: any, } Tables Util Contains all of Zaphy's utility modules. These include: Signal Maid note { color: rgba(95, 164, 255, 0.63) } NOTE: More are to be added soon, these are just the bare bones basic ones. Functions AddServices Adds services to the Services table. function Zaphy:AddServices( Services: {ModuleScript} ) StartZaphy Starts Zaphy. Calls Init functions for all services, then calls Start functions for all services shortly after. function Zaphy:StartZaphy() GetServices Gets all Zaphy Services. function Zaphy:GetServices() GetService Get a service initiated by Zaphy. Returns nil if the service does not exist/wasn't loaded. function Zaphy:GetService( ServiceName: string ) TellClient Tell the Client to do something. function Zaphy:TellClient( Player: Player, RemoteName: string, ... ) UnreliablyTellClient Tell the Client to do something, uses unreliable remote events. function Zaphy:UnreliablyTellClient( Player: Player, RemoteName: string, ... ) TellAllClients Tell all clients to do something. function loader:TellAllClients( RemoteName: string, ... ) UnreliablyTellAllClients Tell all clients to do something, uses unreliable remote events. function Zaphy:UnreliablyTellAllClients( RemoteName: string, ... ) ListenAskFromClient Listens for when the Client uses :AskServer and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenAskFromClient( RemoteName: string, Callback: () -> () ): RBXScriptConnection ListenUnreliableAskFromClient Listens for when the Client uses :UnreliablyAskServer and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenUnreliableAskFromClient( RemoteName: string, Callback: () -> () ): RBXScriptConnection \u2500\u2500\u2500\u2500\u2500 Zaphy Client \u2500\u2500\u2500\u2500\u2500 Types Controller type Controller = { Name: string, [any]: any, } Tables Util Contains all of Zaphy's utility modules. These include: Signal Maid note { color: rgba(95, 164, 255, 0.63) } NOTE: More are to be added soon, these are just the bare bones basic ones. Functions AddControllers Adds controllers to the Controllers table. function Zaphy:AddControllers( Controllers: {ModuleScript} ) StartZaphy Starts Zaphy. Calls Init functions for all services, then calls Start functions for all services shortly after. function Zaphy:StartZaphy() GetControllers Gets all Zaphy Controllers. function Zaphy:GetControllers() GetController Get a controller initiated by Zaphy. Returns nil if the controller does not exist/wasn't loaded. function Zaphy:GetController( ControllerName: string ) AskServer Ask the server to do something. function Zaphy:AskServer( RemoteName: string, ... ) UnreliablyAskServer Ask the server to do something, uses unreliable remove events. function Zaphy:UnreliablyAskServer( RemoteName: string, ... ) ListenTellFromServer Listens for when the Server uses :TellClient or :TellAllClients and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenTellFromServer( RemoteName: string, Callback: () -> () ): RBXScriptConnection ListenUnreliableTellFromServer Listens for when the Server uses :UnreliablyTellClient or :UnreliablyTellAllClients and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenUnreliableTellFromServer( RemoteName: string, Callback: () -> () )","title":"API"},{"location":"api/#zaphy-server","text":"","title":"\u2500\u2500\u2500\u2500\u2500 Zaphy Server \u2500\u2500\u2500\u2500\u2500"},{"location":"api/#types","text":"","title":"Types"},{"location":"api/#service","text":"type Service = { Name: string, [any]: any, }","title":"Service"},{"location":"api/#tables","text":"","title":"Tables"},{"location":"api/#util","text":"Contains all of Zaphy's utility modules. These include: Signal Maid note { color: rgba(95, 164, 255, 0.63) } NOTE: More are to be added soon, these are just the bare bones basic ones.","title":"Util"},{"location":"api/#functions","text":"","title":"Functions"},{"location":"api/#addservices","text":"Adds services to the Services table. function Zaphy:AddServices( Services: {ModuleScript} )","title":"AddServices"},{"location":"api/#startzaphy","text":"Starts Zaphy. Calls Init functions for all services, then calls Start functions for all services shortly after. function Zaphy:StartZaphy()","title":"StartZaphy"},{"location":"api/#getservices","text":"Gets all Zaphy Services. function Zaphy:GetServices()","title":"GetServices"},{"location":"api/#getservice","text":"Get a service initiated by Zaphy. Returns nil if the service does not exist/wasn't loaded. function Zaphy:GetService( ServiceName: string )","title":"GetService"},{"location":"api/#tellclient","text":"Tell the Client to do something. function Zaphy:TellClient( Player: Player, RemoteName: string, ... )","title":"TellClient"},{"location":"api/#unreliablytellclient","text":"Tell the Client to do something, uses unreliable remote events. function Zaphy:UnreliablyTellClient( Player: Player, RemoteName: string, ... )","title":"UnreliablyTellClient"},{"location":"api/#tellallclients","text":"Tell all clients to do something. function loader:TellAllClients( RemoteName: string, ... )","title":"TellAllClients"},{"location":"api/#unreliablytellallclients","text":"Tell all clients to do something, uses unreliable remote events. function Zaphy:UnreliablyTellAllClients( RemoteName: string, ... )","title":"UnreliablyTellAllClients"},{"location":"api/#listenaskfromclient","text":"Listens for when the Client uses :AskServer and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenAskFromClient( RemoteName: string, Callback: () -> () ): RBXScriptConnection","title":"ListenAskFromClient"},{"location":"api/#listenunreliableaskfromclient","text":"Listens for when the Client uses :UnreliablyAskServer and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenUnreliableAskFromClient( RemoteName: string, Callback: () -> () ): RBXScriptConnection","title":"ListenUnreliableAskFromClient"},{"location":"api/#zaphy-client","text":"","title":"\u2500\u2500\u2500\u2500\u2500 Zaphy Client \u2500\u2500\u2500\u2500\u2500"},{"location":"api/#types_1","text":"","title":"Types"},{"location":"api/#controller","text":"type Controller = { Name: string, [any]: any, }","title":"Controller"},{"location":"api/#tables_1","text":"","title":"Tables"},{"location":"api/#util_1","text":"Contains all of Zaphy's utility modules. These include: Signal Maid note { color: rgba(95, 164, 255, 0.63) } NOTE: More are to be added soon, these are just the bare bones basic ones.","title":"Util"},{"location":"api/#functions_1","text":"","title":"Functions"},{"location":"api/#addcontrollers","text":"Adds controllers to the Controllers table. function Zaphy:AddControllers( Controllers: {ModuleScript} )","title":"AddControllers"},{"location":"api/#startzaphy_1","text":"Starts Zaphy. Calls Init functions for all services, then calls Start functions for all services shortly after. function Zaphy:StartZaphy()","title":"StartZaphy"},{"location":"api/#getcontrollers","text":"Gets all Zaphy Controllers. function Zaphy:GetControllers()","title":"GetControllers"},{"location":"api/#getcontroller","text":"Get a controller initiated by Zaphy. Returns nil if the controller does not exist/wasn't loaded. function Zaphy:GetController( ControllerName: string )","title":"GetController"},{"location":"api/#askserver","text":"Ask the server to do something. function Zaphy:AskServer( RemoteName: string, ... )","title":"AskServer"},{"location":"api/#unreliablyaskserver","text":"Ask the server to do something, uses unreliable remove events. function Zaphy:UnreliablyAskServer( RemoteName: string, ... )","title":"UnreliablyAskServer"},{"location":"api/#listentellfromserver","text":"Listens for when the Server uses :TellClient or :TellAllClients and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenTellFromServer( RemoteName: string, Callback: () -> () ): RBXScriptConnection","title":"ListenTellFromServer"},{"location":"api/#listenunreliabletellfromserver","text":"Listens for when the Server uses :UnreliablyTellClient or :UnreliablyTellAllClients and triggers the given callback. Returns an RBXScriptConnection. function Zaphy:ListenUnreliableTellFromServer( RemoteName: string, Callback: () -> () )","title":"ListenUnreliableTellFromServer"}]}